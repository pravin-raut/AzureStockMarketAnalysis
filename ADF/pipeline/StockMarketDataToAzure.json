{
	"name": "StockMarketDataToAzure",
	"properties": {
		"activities": [
			{
				"name": "cp_stockdata_to_storage",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Get_Task_Table",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "DelimitedTextSource",
						"storeSettings": {
							"type": "HttpReadSettings",
							"requestMethod": "GET"
						},
						"formatSettings": {
							"type": "DelimitedTextReadSettings"
						}
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".csv"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "ds_Stock_Market",
						"type": "DatasetReference",
						"parameters": {
							"function_name": {
								"value": "@pipeline().parameters.FUNCTION_NAME",
								"type": "Expression"
							},
							"ticker": {
								"value": "@pipeline().parameters.ticker",
								"type": "Expression"
							},
							"start_day": {
								"value": "@pipeline().parameters.start_day",
								"type": "Expression"
							},
							"end_day": {
								"value": "@pipeline().parameters.end_day",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "ds_stock_market_storage",
						"type": "DatasetReference",
						"parameters": {
							"CONTAINER_NAME": {
								"value": "@pipeline().parameters.CONTAINER_NAME",
								"type": "Expression"
							},
							"DIRECTORY_NAME": {
								"value": "@pipeline().parameters.DIRECTORY_NAME",
								"type": "Expression"
							},
							"FILE_NAME": {
								"value": "@activity('Get_Task_Table').output.resultSets[0].rows[0].FileName",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "Get_Task_Table",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Insert Task Table",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_Syanpase",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"parameters": [
								{
									"name": "PROCESS_NAME",
									"type": "String",
									"value": {
										"value": "@pipeline().parameters.PROCESS_NAME",
										"type": "Expression"
									},
									"direction": "Input"
								}
							],
							"type": "Query",
							"text": "SELECT CONCAT(Task_Name,'_',replace(FILE_DATE,'-','_'),'.csv') as FileName,\n    RIGHT(concat(0,DAY(FILE_DATE)),2) AS day,\n    RIGHT(concat(0,month(FILE_DATE)),2) AS month,\n    year(FILE_DATE) as year\nfrom TaskData\nwhere TASK_STATUS='STARTED'\nand Task_Name=@PROCESS_NAME\n"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Update_Task_Success",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "cp_stockdata_to_storage",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_Syanpase",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"parameters": [
								{
									"name": "PROCESS_NAME",
									"type": "String",
									"value": "@pipeline().parameters.PROCESS_NAME"
								}
							],
							"type": "Query",
							"text": "update TaskData\nset\nROW_UPD_TMS=GETDATE(),\nTASK_STATUS='COMPLETED'\nwhere TASK_STATUS='STARTED';\n\n\nUpdate PARAM_INFO\nset \nPARAM_VALUE=(select PARAM_VALUE from PARAM_INFO where PARAM_NAME='end_day' and PARAM_ID=1)\nUpdate PARAM_INFO\nset \nPARAM_VALUE=(select PARAM_VALUE from PARAM_INFO where PARAM_NAME='end_day' and PARAM_ID=(select PARAM_ID from PARAM_INFO where PROCESS_NAME=@PROCESS_NAME ))\nwhere \n\nPARAM_NAME='start_day'\nand PARAM_ID=(select PARAM_ID from PARAM_INFO where PROCESS_NAME=@PROCESS_NAME);\n\n\n\nUpdate PARAM_INFO\nset \nPARAM_VALUE=format(DATEADD(Day,1,(select PARAM_VALUE from PARAM_INFO where PARAM_NAME='end_day' and PARAM_ID=(select PARAM_ID from PARAM_INFO where PROCESS_NAME=@PROCESS_NAME )))),'yyyy-MM-dd')\nwhere \n\nPARAM_NAME='end_day'\nand PARAM_ID=(select PARAM_ID from PARAM_INFO where PROCESS_NAME=@PROCESS_NAME);"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Update_Task_Failed",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "cp_stockdata_to_storage",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_Syanpase",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "update TaskData\nset\nROW_UPD_TMS=GETDATE(),\nTASK_STATUS='FAILED'\nwhere TASK_STATUS='STARTED'"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Insert Task Table",
				"type": "Script",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_Syanpase",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"parameters": [
								{
									"name": "PROCESS_NAME",
									"type": "String",
									"value": {
										"value": "@pipeline().parameters.PROCESS_NAME",
										"type": "Expression"
									},
									"direction": "Input"
								}
							],
							"type": "Query",
							"text": "insert into TaskData\n    (TASK_NAME,FILE_DATE,TASK_STATUS,ROW_INS_TMS)\nSELECT @PROCESS_NAME as TASK_NAME , case when DayOfWeek=6 then DATEADD(day,3,ActualDate)\nwhen nh.Hol_Date is not null then DATEADD(day,2,ActualDate)\n else DATEADD(day,1,ActualDate) end as FILE_DATE, 'STARTED', Getdate() as ROW_INS_TMS\nFROM DateDimension  dd\n    left outer join Ref_NSE_Holiday nh\n    ON dd.ActualDate=coalesce(DATEADD(day,-1,cast(nh.Hol_Date as date)),DATEADD(day,-10,FOrmat(GETDATE(),'yyyy-MM-dd')))\nWHERE ActualDate=(Select coalesce(max(FILE_DATE),DATEADD(day,-10,FOrmat(GETDATE(),'yyyy-MM-dd')))\n    from TaskData)\n    and DayOfWeek not in (1,7)\n\t\n\t;"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			}
		],
		"parameters": {
			"PROCESS_NAME": {
				"type": "string"
			},
			"DIRECTORY_NAME": {
				"type": "string"
			},
			"CONTAINER_NAME": {
				"type": "string"
			},
			"FUNCTION_NAME": {
				"type": "string"
			},
			"SCHEMA_NAME": {
				"type": "string"
			},
			"TABLE_NAME": {
				"type": "string"
			},
			"ticker": {
				"type": "string"
			},
			"start_day": {
				"type": "string"
			},
			"end_day": {
				"type": "string"
			}
		},
		"annotations": [],
		"lastPublishTime": "2023-05-11T17:25:31Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}